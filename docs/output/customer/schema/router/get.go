// This file has been generated by go-spector; DO NOT EDIT.
package router

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"github.com/go-chi/chi"
	"github.com/go-spector/go-spector/docs/output/customer/schema"
	"net/http"
	"regexp"
)

var idRegex = regexp.MustCompile(`an uuid regex here`)

var GetHandlerParamsKey = &struct{ i int }{}

type Params struct {
	ID string
}

type GetHandler http.HandlerFunc

func NewGetHandler(fn http.HandlerFunc) GetHandler {
	return GetHandler(fn)
}

func (h GetHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {

	err := h.DecodeParams(r)
	if v := (&schema.ValidationError{}); errors.As(err, &v) {
		w.WriteHeader(http.StatusUnprocessableEntity)
		if err := json.NewEncoder(w).Encode(v); err != nil {
			w.WriteHeader(http.StatusInternalServerError)
		}
		return
	}
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	h(w, r)
}

func (h GetHandler) DecodeParams(r *http.Request) error {
	err := &schema.ValidationError{}

	p := Params{ID: chi.URLParam(r, "id")}

	if p.ID == "" {
		err = err.Append(fmt.Errorf("id: must not be empty"))
	}

	if errors.Unwrap(err) != nil {
		return err
	}

	r = r.WithContext(context.WithValue(r.Context(), GetHandlerParamsKey, p))

	return nil
}
