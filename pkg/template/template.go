package template

import (
	"fmt"
	"strings"
	"text/template"
)

var FuncMap = template.FuncMap{
	"mapOf":             mapOf,
	"receiverName":      ReceiverName,
	"generatedFileNote": GenerateFileNote,
	"camelCase":         CamelCase,
	"mapAliases":        MapAliases,
	"isBool":            isBool,
	"isInt":             isInt,
	"isString":          isString,
	"isSlice":           isSlice,
	"isMap":             isMap,
}

func New() *template.Template {
	t := &template.Template{}
	t.Funcs(FuncMap)

	return t
}

func mapOf(values ...interface{}) (map[string]interface{}, error) {
	if len(values)%2 != 0 {
		return nil, fmt.Errorf("not enough parameters: %d", len(values))
	}

	m := make(map[string]interface{}, len(values)/2)
	for i := 0; i < len(values); i += 2 {
		k, ok := values[i].(string)
		if !ok {
			return nil, fmt.Errorf("key must be string: %v", k)
		}
		m[k] = values[i+1]
	}

	return m, nil
}

func ReceiverName(s string) string {
	if s == "" {
		return s
	}

	return strings.ToLower(s[0:1])
}

func GenerateFileNote() string {
	return "// This file has been generated by go-spector; DO NOT EDIT."
}

func CamelCase(s string) string {
	if len(s) <= 1 {
		return strings.ToUpper(s)
	}

	return strings.ToUpper(s[0:1]) + s[1:]
}

type Format = string
type Alias = string

func MapAliases(formatToAlias map[Format]Alias, optional bool) string {
	if len(formatToAlias) == 0 {
		return ""
	}

	var omitempty string
	if optional {
		omitempty = ",omitempty"
	}

	var tags []string
	for format, alias := range formatToAlias {
		tags = append(tags, fmt.Sprintf(`%s:"%s%s"`, format, alias, omitempty))
	}

	return fmt.Sprintf("`%s`", strings.Join(tags, " "))
}

func isBool(s string) bool {
	switch s {
	case "bool", "boolean":
		return true
	default:
		return false
	}
}

func isInt(s string) bool {
	switch s {
	case "int",
		"uint",
		"uintptr",
		"uint8",
		"uint16",
		"uint32",
		"uint64",
		"int8",
		"int16",
		"int32",
		"int64",
		"float32",
		"float64",
		"complex64",
		"complex128":
		return true
	default:
		return false
	}
}

func isString(s string) bool {
	switch s {
	case "string":
		return true
	default:
		return false
	}
}

func isSlice(s string) bool {
	if s == "" {
		return true
	}

	return false
}

func isMap(s string) bool {
	if s == "" {
		return true
	}

	return false
}
